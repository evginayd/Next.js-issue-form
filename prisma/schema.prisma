generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid()) // UUID kullanıyoruz
  username       String?         @unique // Mevcut uygulamanız için
  email          String          @unique
  emailVerified  DateTime? // NextAuth.js için
  password       String? // Mevcut uygulamanız için, opsiyonel
  name           String? // NextAuth.js için
  image          String? // NextAuth.js için
  isAdmin        Boolean         @default(false) // Mevcut uygulamanız için
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[] // NextAuth.js için
  sessions       Session[] // NextAuth.js için
  authenticators Authenticator[] // NextAuth.js için WebAuthn (opsiyonel)
  assignedIssues Issue[]         @relation("AssignedIssues") // Mevcut uygulamanız
  createdIssues  Issue[]         @relation("CreatedIssues") // Mevcut uygulamanız
}

model Issue {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  status       Status    @default(OPEN)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assignedToId String?
  category     String?
  createdById  String
  dueDate      DateTime?
  labels       String[]  @default([])
  priority     Priority  @default(MEDIUM)
  assignedTo   User?     @relation("AssignedIssues", fields: [assignedToId], references: [id])
  createdBy    User      @relation("CreatedIssues", fields: [createdById], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
